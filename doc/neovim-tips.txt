*neovim-tips.txt*     Neovim Tips Plugin Documentation                  *neovim-tips*

Author: saxon1964 <https://github.com/saxon1964>
License: MIT
Version: 1.0

==============================================================================
CONTENTS                                                *neovim-tips-contents*

1. Introduction.................................|neovim-tips-introduction|
2. Features.....................................|neovim-tips-features|
3. Installation.................................|neovim-tips-installation|
4. Configuration................................|neovim-tips-configuration|
5. Commands.....................................|neovim-tips-commands|
6. Search.......................................|neovim-tips-search|
7. Categories...................................|neovim-tips-categories|
8. User Tips....................................|neovim-tips-user-tips|
9. Daily Tips...................................|neovim-tips-daily|
10. Troubleshooting.............................|neovim-tips-troubleshooting|

==============================================================================
1. INTRODUCTION                                     *neovim-tips-introduction*

This Lua plugin for Neovim brings together hundreds of helpful tips, tricks,
and shortcuts, all available through a custom picker. It's easy to expand
with your own entries, so the collection grows with you and your workflow.

The plugin includes 900+ curated tips organized into 70+ categories, covering
everything from basic commands to advanced Neovim features.

Repository: https://github.com/saxon1964/neovim-tips

==============================================================================
2. FEATURES                                             *neovim-tips-features*

â€¢ Beautiful custom picker with three-pane interface
â€¢ Daily tip popup (configurable: off, daily, or every launch)
â€¢ Lightweight dependencies (only nui.nvim and render-markdown)
â€¢ Word-based search with intelligent filtering
â€¢ Live markdown rendering in preview pane
â€¢ Simple navigation with mouse and keyboard
â€¢ Copy-friendly interface for tips and code snippets
â€¢ Cursor preservation after closing
â€¢ Support for categories, tags, and rich text
â€¢ Lazy loading for optimal startup performance
â€¢ 900+ curated built-in tips
â€¢ Unlimited personal tips with configurable prefixes
â€¢ Automatic title conflict detection

==============================================================================
3. INSTALLATION                                     *neovim-tips-installation*

The plugin requires these dependencies:
â€¢ MunifTanjim/nui.nvim
â€¢ MeanderingProgrammer/render-markdown.nvim

3.1 Lazy.nvim ~
>lua
    {
      "saxon1964/neovim-tips",
      version = "*",
      dependencies = {
        "MunifTanjim/nui.nvim",
        "MeanderingProgrammer/render-markdown.nvim"
      },
      opts = {},
      init = function()
        local map = vim.keymap.set
        map("n", "<leader>nto", ":NeovimTips<CR>",
            { desc = "Neovim tips", noremap = true, silent = true })
        map("n", "<leader>nte", ":NeovimTipsEdit<CR>",
            { desc = "Edit your Neovim tips", noremap = true, silent = true })
        map("n", "<leader>nta", ":NeovimTipsAdd<CR>",
            { desc = "Add your Neovim tip", noremap = true, silent = true })
        map("n", "<leader>nth", ":help neovim-tips<CR>",
            { desc = "Neovim tips help", noremap = true, silent = true })
        map("n", "<leader>ntr", ":NeovimTipsRandom<CR>",
            { desc = "Show random tip", noremap = true, silent = true })
      end
    }
<

3.2 packer.nvim ~
>lua
    use {
      "saxon1964/neovim-tips",
      tag = "*",
      requires = {
        "MunifTanjim/nui.nvim",
        "MeanderingProgrammer/render-markdown.nvim"
      },
      config = function()
        require("neovim_tips").setup()
      end
    }
<

See the README for additional package manager examples.

==============================================================================
4. CONFIGURATION                                   *neovim-tips-configuration*

The plugin accepts the following configuration options:

>lua
    require("neovim_tips").setup({
      -- Path to user tips file
      user_file = vim.fn.stdpath("config") .. "/neovim_tips/user_tips.md",

      -- Prefix added to user tip titles to prevent conflicts
      user_tip_prefix = "[User] ",

      -- Show warnings when user tips conflict with builtin tips
      warn_on_conflicts = true,

      -- Daily tip mode: 0=off, 1=once per day, 2=every startup
      daily_tip = 1,
    })
<

4.1 Configuration Options ~

*neovim-tips-config-user-file*
user_file                   Path to your personal tips file
                           Default: ~/.config/nvim/neovim_tips/user_tips.md

*neovim-tips-config-prefix*
user_tip_prefix            Prefix for user tips to avoid conflicts
                           Default: "[User] "
                           Examples: "ðŸ”§ ", "My ", ""

*neovim-tips-config-conflicts*
warn_on_conflicts          Show warnings for conflicting tip titles
                           Default: true

*neovim-tips-config-daily*
daily_tip                  Daily tip popup behavior
                           0 = disabled
                           1 = once per day (default)
                           2 = every startup

==============================================================================
5. COMMANDS                                             *neovim-tips-commands*

*:NeovimTips*              Open the searchable tips picker with three-pane
                           interface (search, tips list, markdown preview)

*:NeovimTipsEdit*          Open your personal tips file for editing
                           Creates the file if it doesn't exist

*:NeovimTipsAdd*           Insert a new tip template into your personal file
                           and start editing at the cursor position

*:NeovimTipsRandom*        Display a random tip in a popup window
                           Same format as daily tip feature

The plugin provides no default key mappings. Add your own in the
configuration as shown in the installation examples.

==============================================================================
6. SEARCH                                                 *neovim-tips-search*

The tips picker features powerful search capabilities with multiple modes.

6.1 Basic Search ~
                                                        *neovim-tips-search-basic*

Simply type to search tip titles:
>
    vim motion          â†’ finds tips with both "vim" and "motion"
    insert character    â†’ finds tips about inserting characters
    delete word         â†’ finds tips about deleting words
<

6.2 Tag Search ~
                                                        *neovim-tips-search-tags*

Use `t:` prefix to search by tags:
>
    t:motion           â†’ finds all tips tagged with "motion"
    t:delete           â†’ finds all tips tagged with "delete"
    t:operator         â†’ finds all tips tagged with "operator"
<

6.3 Category Search ~
                                                   *neovim-tips-search-categories*

Use `c:` prefix to search by categories:
>
    c:editing          â†’ finds all tips in "Editing" category
    c:search           â†’ finds all tips in "Search" category
    c:"Key Mappings"   â†’ finds tips in "Key Mappings" (quoted for spaces)
<

6.4 Combined Search ~
                                                     *neovim-tips-search-combined*

Mix different search types (all must match):
>
    motion c:editing t:operator    â†’ tips with "motion" + "Editing" + "operator"
    insert file t:save             â†’ tips with "insert file" + "save" tag
    c:search t:pattern replace     â†’ "Search" tips + "pattern" tag + "replace"
<

6.5 Search Help ~
                                                        *neovim-tips-search-help*

Get help with available tags and categories:

`t:?`                      Shows popup with all available tags (1000+ tags)
`c:?`                      Shows popup with all available categories (70+)

Help picker navigation:
â€¢ Arrow keys or j/k       Navigate up/down
â€¢ Press any letter        Jump to first item starting with that letter
â€¢ Enter                   Select the item
â€¢ Esc or q               Cancel

6.6 Search Features ~

â€¢ Case insensitive matching
â€¢ Word-based search (all words must match)
â€¢ Quoted values for multi-word tags/categories
â€¢ Real-time filtering with instant preview
â€¢ No results handling (clears display when no matches)

==============================================================================
7. CATEGORIES                                         *neovim-tips-categories*

The plugin includes 70+ categories. Here are the main ones:

â€¢ Advanced Neovim         â€¢ Advanced Search         â€¢ Autocommands
â€¢ Buffer Management       â€¢ Clever Tricks           â€¢ Clipboard
â€¢ Command Execution       â€¢ Command History         â€¢ Command Line
â€¢ Command Line Advanced   â€¢ Completion              â€¢ Configuration
â€¢ Cut and Paste          â€¢ Development             â€¢ Diagnostics
â€¢ Display                â€¢ Edit                    â€¢ Editing
â€¢ Exit                   â€¢ File                    â€¢ File History
â€¢ File Navigation        â€¢ File Operations         â€¢ File Recovery
â€¢ File Type Specific     â€¢ Folding                 â€¢ Formatting
â€¢ Fun                    â€¢ Functions               â€¢ Global
â€¢ Help                   â€¢ Indentation             â€¢ Information
â€¢ Insert                 â€¢ Insert Mode Advanced    â€¢ Integration
â€¢ Interface              â€¢ Key Mappings            â€¢ LSP
â€¢ Lua                    â€¢ Macros                  â€¢ Mapping
â€¢ Marks                  â€¢ Mode Switching          â€¢ Movement
â€¢ Navigation             â€¢ Neovim Features         â€¢ Normal Mode
â€¢ Performance            â€¢ Performance Optimization Advanced
â€¢ Registers              â€¢ Scripting               â€¢ Search
â€¢ Search Replace         â€¢ Session                 â€¢ Session Management
â€¢ System                 â€¢ System Information      â€¢ Tabs
â€¢ Terminal               â€¢ Text Editing            â€¢ Text Input
â€¢ Text Manipulation      â€¢ Text Objects            â€¢ Treesitter
â€¢ UI                     â€¢ View Management         â€¢ Vim Script
â€¢ Visual                 â€¢ Visual Mode Advanced    â€¢ Window Management
â€¢ Windows                â€¢ Workflow                â€¢ Workflow Patterns

Use `c:?` in the search bar to see the complete list with descriptions.

==============================================================================
8. USER TIPS                                           *neovim-tips-user-tips*

You can add your own tips alongside the built-in collection.

8.1 Adding Tips ~
                                                     *neovim-tips-user-tips-add*

Use |:NeovimTipsAdd| to add a new tip, or |:NeovimTipsEdit| to edit your
tips file directly.

8.2 Tip Format ~
                                                  *neovim-tips-user-tips-format*

Each tip follows this exact format:
>
    # Title: My tip title
    # Category: My category name
    # Tags: tag1, tag2, tag3
    ---
    Description in markdown format.

    ```vim
    some-command
    ```

    Additional text here.
    ***
<

The format is strict:
â€¢ Must start with `# Title:`
â€¢ Must include `# Category:` and `# Tags:`
â€¢ Description starts with `---`
â€¢ Description ends with `***` or `===`
â€¢ Everything between `---` and `***` is rendered as markdown

8.3 Conflict Prevention ~
                                                *neovim-tips-user-tips-conflicts*

User tips are automatically prefixed to prevent conflicts with built-in tips.
If you create a tip titled "Join lines", it appears as "[User] Join lines".

Do NOT add the prefix yourself - it's automatic.

8.4 Features ~

â€¢ Automatic prefixing for conflict prevention
â€¢ Conflict detection with warnings
â€¢ Automatic "user" tag addition
â€¢ Same format and features as built-in tips
â€¢ Configurable prefix (default: "[User] ")

==============================================================================
9. DAILY TIPS                                             *neovim-tips-daily*

The plugin can show a random tip popup when you start Neovim.

9.1 Configuration ~
                                                      *neovim-tips-daily-config*

Set the `daily_tip` option:
â€¢ 0 = Disabled (no popup)
â€¢ 1 = Once per day (default)
â€¢ 2 = Every Neovim startup

9.2 Features ~

â€¢ "Did you know?" popup with centered layout
â€¢ Smart persistence using ~/.local/share/nvim/neovim_tips/persistent.json
â€¢ Full markdown rendering with render-markdown.nvim
â€¢ Easy copying of tip content and code snippets
â€¢ Close with `q` or `<Esc>`
â€¢ Includes contribution link in footer

9.3 Persistence ~

Once-daily mode tracks when tips were shown to avoid repetition within
the same day. Data is stored in:
~/.local/share/nvim/neovim_tips/persistent.json

==============================================================================
10. TROUBLESHOOTING                               *neovim-tips-troubleshooting*

10.1 Common Issues ~

No tips showing                Check that data/ directory exists in plugin
                               installation. Verify dependencies are installed.

Search not working             Make sure you're using correct syntax:
                               - Basic: just type words
                               - Tags: t:tagname
                               - Categories: c:categoryname

Daily tip not appearing        Check `daily_tip` configuration value.
                               Verify persistent.json isn't corrupted.

User tips not saving          Check `user_file` path is writable.
                               Verify parent directories exist.

Markdown not rendering         Ensure render-markdown.nvim is installed
                               and configured properly.

10.2 File Locations ~

Built-in tips:                <plugin_directory>/data/
User tips:                     ~/.config/nvim/neovim_tips/user_tips.md
Daily tip persistence:         ~/.local/share/nvim/neovim_tips/persistent.json

10.3 Disabling Completion ~

If using completion engines and want to disable them in the search bar:
>lua
    -- For blink.cmp
    require('blink.cmp').setup({
      enabled = function()
        return vim.bo.filetype ~= "neovim-tips-search"
      end,
    })

    -- For nvim-cmp
    require('cmp').setup({
      enabled = function()
        return vim.bo.filetype ~= "neovim-tips-search"
      end,
    })
<

==============================================================================
vim:tw=78:ts=8:ft=help:norl: