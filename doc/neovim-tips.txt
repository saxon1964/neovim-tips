*neovim-tips.txt*     Neovim Tips Plugin Documentation                  *neovim-tips*

Author: saxon1964 <https://github.com/saxon1964>
License: MIT
Version: 1.0

==============================================================================
CONTENTS                                                *neovim-tips-contents*

1. Introduction.................................|neovim-tips-introduction|
2. Features.....................................|neovim-tips-features|
3. Installation.................................|neovim-tips-installation|
4. Markdown Rendering...........................|neovim-tips-rendering|
5. Configuration................................|neovim-tips-configuration|
6. Commands.....................................|neovim-tips-commands|
7. Search.......................................|neovim-tips-search|
8. Categories...................................|neovim-tips-categories|
9. User Tips....................................|neovim-tips-user-tips|
10. Performance & Caching.......................|neovim-tips-cache|
11. Daily Tips..................................|neovim-tips-daily|
12. Troubleshooting.............................|neovim-tips-troubleshooting|

==============================================================================
1. INTRODUCTION                                     *neovim-tips-introduction*

This Lua plugin for Neovim brings together hundreds of helpful tips, tricks,
and shortcuts, all available through a custom picker. It's easy to expand
with your own entries, so the collection grows with you and your workflow.

The plugin includes 900+ curated tips organized into 70+ categories, covering
everything from basic commands to advanced Neovim features.

Repository: https://github.com/saxon1964/neovim-tips

==============================================================================
2. FEATURES                                             *neovim-tips-features*

• Beautiful custom picker with three-pane interface
• Daily tip popup (configurable: off, daily, or every launch)
• Lightweight dependencies (only nui.nvim required)
• Automatic markdown renderer detection (markview, render-markdown, or raw)
• Word-based search with intelligent filtering
• Live markdown rendering or clean raw markdown display
• Simple navigation with mouse and keyboard
• Copy-friendly interface for tips and code snippets
• Cursor preservation after closing
• Support for categories, tags, and rich text
• Lazy loading for optimal startup performance
• 900+ curated built-in tips
• Unlimited personal tips with configurable prefixes
• Automatic title conflict detection

==============================================================================
3. INSTALLATION                                     *neovim-tips-installation*

The plugin requires only:
• MunifTanjim/nui.nvim (required)

Optional markdown renderers (auto-detected):
• OXY2DEV/markview.nvim (priority 1 - rich rendering)
• MeanderingProgrammer/render-markdown.nvim (priority 2 - clean rendering)
• Raw markdown display if no renderer installed (many users prefer this)

3.1 Lazy.nvim ~
>lua
    {
      "saxon1964/neovim-tips",
      version = "*",
      dependencies = {
        "MunifTanjim/nui.nvim",
        -- OPTIONAL: Choose your preferred renderer (or omit for raw markdown)
        "MeanderingProgrammer/render-markdown.nvim", -- Clean rendering
        -- OR: "OXY2DEV/markview.nvim", -- Rich rendering
      },
      opts = {},
      init = function()
        local map = vim.keymap.set
        map("n", "<leader>nto", ":NeovimTips<CR>",
            { desc = "Neovim tips", noremap = true, silent = true })
        map("n", "<leader>nte", ":NeovimTipsEdit<CR>",
            { desc = "Edit your Neovim tips", noremap = true, silent = true })
        map("n", "<leader>nta", ":NeovimTipsAdd<CR>",
            { desc = "Add your Neovim tip", noremap = true, silent = true })
        map("n", "<leader>nth", ":help neovim-tips<CR>",
            { desc = "Neovim tips help", noremap = true, silent = true })
        map("n", "<leader>ntr", ":NeovimTipsRandom<CR>",
            { desc = "Show random tip", noremap = true, silent = true })
        map("n", "<leader>ntp", ":NeovimTipsPdf<CR>",
            { desc = "Open Neovim tips PDF", noremap = true, silent = true })
      end
    }
<

3.2 packer.nvim ~
>lua
    use {
      "saxon1964/neovim-tips",
      tag = "*",
      requires = {
        "MunifTanjim/nui.nvim",
        "MeanderingProgrammer/render-markdown.nvim"
      },
      config = function()
        require("neovim_tips").setup()
      end
    }
<

See the README for additional package manager examples.

==============================================================================
4. MARKDOWN RENDERING                                 *neovim-tips-rendering*

The plugin automatically detects and uses available markdown renderers to enhance
the display of tips in both the picker and daily tip popups.

4.1 Rendering Priority ~

The plugin uses this priority order:

1. markview.nvim (Priority 1)
   • Rich rendering with advanced typography and syntax highlighting
   • Beautiful visual enhancements and interactive elements
   • Install: Add "OXY2DEV/markview.nvim" to your dependencies

2. render-markdown.nvim (Priority 2)
   • Clean, lightweight rendering with excellent performance  
   • Simple and fast markdown display
   • Install: Add "MeanderingProgrammer/render-markdown.nvim" to dependencies

3. Raw Markdown (Fallback)
   • Clean, readable plain text display
   • Zero additional dependencies beyond nui.nvim
   • Many users prefer this for its simplicity and speed

4.2 Automatic Detection ~

No configuration is required. The plugin automatically:
• Detects which renderer plugins are available in your Neovim setup
• Uses the highest priority renderer found
• Falls back gracefully to raw markdown if no renderer is installed
• Works immediately after installing any supported renderer

You can install multiple renderers; the plugin will automatically choose the
highest priority one. To change renderers, simply remove/install the plugins
you prefer.

==============================================================================
5. CONFIGURATION                                   *neovim-tips-configuration*

The plugin accepts the following configuration options:

>lua
    require("neovim_tips").setup({
      -- Path to user tips file
      user_file = vim.fn.stdpath("config") .. "/neovim_tips/user_tips.md",

      -- Prefix added to user tip titles to prevent conflicts
      user_tip_prefix = "[User] ",

      -- Show warnings when user tips conflict with builtin tips
      warn_on_conflicts = true,

      -- Daily tip mode: 0=off, 1=once per day, 2=every startup
      daily_tip = 1,

      -- Bookmark symbol (default: "🌟 ")
      bookmark_symbol = "🌟 ",

      -- Enable caching for faster loading (default: true)
      use_cache = true,
    })
<

4.1 Configuration Options ~

*neovim-tips-config-user-file*
user_file                   Path to your personal tips file
                           Default: ~/.config/nvim/neovim_tips/user_tips.md

*neovim-tips-config-prefix*
user_tip_prefix            Prefix for user tips to avoid conflicts
                           Default: "[User] "
                           Examples: "🔧 ", "My ", ""

*neovim-tips-config-conflicts*
warn_on_conflicts          Show warnings for conflicting tip titles
                           Default: true

*neovim-tips-config-daily*
daily_tip                  Daily tip popup behavior
                           0 = disabled
                           1 = once per day (default)
                           2 = every startup

*neovim-tips-config-bookmark*
bookmark_symbol            Symbol displayed for bookmarked tips
                           Default: "🌟 "
                           Examples: "⭐ ", "✨ ", "💫 ", "🔥 ", "💎 "

*neovim-tips-config-cache*
use_cache                  Enable automatic caching of parsed tips
                           Default: true (recommended)
                           When enabled, tips are serialized to cache file
                           for 10-20x faster loading on subsequent launches
                           Cache automatically invalidates when files change
                           See |neovim-tips-cache| for details

==============================================================================
5. COMMANDS                                             *neovim-tips-commands*

*:NeovimTips*              Open the searchable tips picker with three-pane
                           interface (search, tips list, markdown preview)

*:NeovimTipsEdit*          Open your personal tips file for editing
                           Creates the file if it doesn't exist

*:NeovimTipsAdd*           Insert a new tip template into your personal file
                           and start editing at the cursor position

*:NeovimTipsRandom*        Display a random tip in a popup window
                           Same format as daily tip feature

*:NeovimTipsPdf*           Open the Neovim Tips PDF book (almost 400 pages)
                           in your system's default PDF viewer
                           Cross-platform: macOS, Linux, Windows
                           PDF location: pdf/book/NeovimTips.pdf

*:NeovimTipsReload*        Reload all tips from markdown files and clear cache
                           Useful after editing markdown files directly
                           Forces a fresh parse of all tips

*:NeovimTipsCacheInfo*     Display cache statistics and status information
                           Shows cache size, location, and last update time
                           Useful for debugging performance issues

The plugin provides no default key mappings. Add your own in the
configuration as shown in the installation examples.

==============================================================================
6. SEARCH                                                 *neovim-tips-search*

The tips picker features powerful search capabilities with multiple modes.

6.1 Basic Search ~
                                                        *neovim-tips-search-basic*

Simply type to search tip titles:
>
    vim motion          → finds tips with both "vim" and "motion"
    insert character    → finds tips about inserting characters
    delete word         → finds tips about deleting words
<

6.2 Tag Search ~
                                                        *neovim-tips-search-tags*

Use `t:` prefix to search by tags:
>
    t:motion           → finds all tips tagged with "motion"
    t:delete           → finds all tips tagged with "delete"
    t:operator         → finds all tips tagged with "operator"
<

6.3 Category Search ~
                                                   *neovim-tips-search-categories*

Use `c:` prefix to search by categories:
>
    c:editing          → finds all tips in "Editing" category
    c:search           → finds all tips in "Search" category
    c:"Key Mappings"   → finds tips in "Key Mappings" (quoted for spaces)
<

6.4 Bookmark Search ~
                                                   *neovim-tips-search-bookmarks*

Use `b:` prefix to search your bookmarked tips:
>
    b:                 → shows all your bookmarked tips
    b:delete           → shows bookmarked tips with "delete" in title
    b:motion           → shows bookmarked tips with "motion" in title
<

**Bookmarking Tips:**
• Press `Ctrl+b` in the picker or daily tip to bookmark/unbookmark
• Bookmarked tips display with your configured symbol (default: 🌟)
• Works from any pane (search bar, tips list, or preview)

6.5 Combined Search ~
                                                     *neovim-tips-search-combined*

Mix different search types (all must match):
>
    motion c:editing t:operator    → tips with "motion" + "Editing" + "operator"
    insert file t:save             → tips with "insert file" + "save" tag
    b: c:editing t:motion          → bookmarked tips in "Editing" + "motion" tag
    b:delete c:text                → bookmarked tips with "delete" + "Text" category
<

6.6 Search Help ~
                                                        *neovim-tips-search-help*

Get help with available tags and categories:

`t:?`                      Shows popup with all available tags (1000+ tags)
`c:?`                      Shows popup with all available categories (70+)

Help picker navigation:
• Arrow keys or j/k       Navigate up/down
• Press any letter        Jump to first item starting with that letter
• Enter                   Select the item
• Esc or q               Cancel

6.7 Search Features ~

• Case insensitive matching
• Word-based search (all words must match)
• Quoted values for multi-word tags/categories
• Real-time filtering with instant preview
• No results handling (clears display when no matches)

==============================================================================
7. CATEGORIES                                         *neovim-tips-categories*

The plugin includes 70+ categories. Here are the main ones:

• Advanced Neovim         • Advanced Search         • Autocommands
• Buffer Management       • Clever Tricks           • Clipboard
• Command Execution       • Command History         • Command Line
• Command Line Advanced   • Completion              • Configuration
• Cut and Paste          • Development             • Diagnostics
• Display                • Edit                    • Editing
• Exit                   • File                    • File History
• File Navigation        • File Operations         • File Recovery
• File Type Specific     • Folding                 • Formatting
• Fun                    • Functions               • Global
• Help                   • Indentation             • Information
• Insert                 • Insert Mode Advanced    • Integration
• Interface              • Key Mappings            • LSP
• Lua                    • Macros                  • Mapping
• Marks                  • Mode Switching          • Movement
• Navigation             • Neovim Features         • Normal Mode
• Performance            • Performance Optimization Advanced
• Registers              • Scripting               • Search
• Search Replace         • Session                 • Session Management
• System                 • System Information      • Tabs
• Terminal               • Text Editing            • Text Input
• Text Manipulation      • Text Objects            • Treesitter
• UI                     • View Management         • Vim Script
• Visual                 • Visual Mode Advanced    • Window Management
• Windows                • Workflow                • Workflow Patterns

Use `c:?` in the search bar to see the complete list with descriptions.

==============================================================================
8. USER TIPS                                           *neovim-tips-user-tips*

You can add your own tips alongside the built-in collection.

8.1 Adding Tips ~
                                                     *neovim-tips-user-tips-add*

Use |:NeovimTipsAdd| to add a new tip, or |:NeovimTipsEdit| to edit your
tips file directly.

8.2 Tip Format ~
                                                  *neovim-tips-user-tips-format*

Each tip follows this exact format:
>
    # Title: My tip title
    # Category: My category name
    # Tags: tag1, tag2, tag3
    ---
    Description in markdown format.

    ```vim
    some-command
    ```

    Additional text here.
    ***
<

The format is strict:
• Must start with `# Title:`
• Must include `# Category:` and `# Tags:`
• Description starts with `---`
• Description ends with `***` or `===`
• Everything between `---` and `***` is rendered as markdown

8.3 Conflict Prevention ~
                                                *neovim-tips-user-tips-conflicts*

User tips are automatically prefixed to prevent conflicts with built-in tips.
If you create a tip titled "Join lines", it appears as "[User] Join lines".

Do NOT add the prefix yourself - it's automatic.

8.4 Features ~

• Automatic prefixing for conflict prevention
• Conflict detection with warnings
• Automatic "user" tag addition
• Same format and features as built-in tips
• Configurable prefix (default: "[User] ")

==============================================================================
9. PERFORMANCE & CACHING                                      *neovim-tips-cache*

The plugin includes an intelligent caching system that dramatically improves
loading performance by serializing parsed tips to disk.

9.1 How It Works ~
                                                       *neovim-tips-cache-how*

First Load:
1. All markdown files in data/ directory are parsed (~100ms)
2. Tips are serialized to ~/.cache/nvim/neovim_tips/tips_cache.lua
3. Metadata with file modification times is saved

Subsequent Loads:
1. Cache validity is checked (file modification times)
2. If valid, serialized Lua table is loaded directly (~5-10ms)
3. Result: 10-20x faster loading!

9.2 Automatic Invalidation ~
                                                  *neovim-tips-cache-invalidation*

The cache is automatically invalidated when:
• Any .md file in the data directory is modified
• User tips file is modified or saved
• Neovim minor version changes
• Cache format version changes

This ensures you always see up-to-date content without manual intervention.

9.3 Cache Location ~
                                                  *neovim-tips-cache-location*

Cache files are stored in:
• Linux/macOS: ~/.cache/nvim/neovim_tips/
• Windows: %LOCALAPPDATA%\nvim-data\neovim_tips\

Files created:
• tips_cache.lua         Serialized Lua table with all parsed tips
• cache_metadata.lua     Metadata with timestamps and version info

9.4 Cache Management ~
                                                *neovim-tips-cache-management*

View cache information:
>
    :NeovimTipsCacheInfo
<
This shows:
• Cache size in KB
• Last update time
• Cache validity status
• File locations

Force cache rebuild:
>
    :NeovimTipsReload
<
This clears the cache and forces a fresh parse of all markdown files.

Disable caching (not recommended):
>lua
    require("neovim_tips").setup({
      use_cache = false,
    })
<

9.5 Performance Benefits ~
                                                  *neovim-tips-cache-performance*

Typical performance with 1000+ tips:

Without cache:
• Load time: ~100ms (parsing all markdown files)
• Startup impact: Noticeable delay

With cache (default):
• First load: ~100ms (creates cache)
• Subsequent loads: ~5-10ms (10-20x faster!)
• Startup impact: Negligible

The cache is especially beneficial for:
• Daily tip feature (loads on every startup)
• Frequently opening the tips picker
• Large tip collections (1000+ tips)

==============================================================================
11. DAILY TIPS                                            *neovim-tips-daily*

The plugin can show a random tip popup when you start Neovim.

11.1 Configuration ~
                                                      *neovim-tips-daily-config*

Set the `daily_tip` option:
• 0 = Disabled (no popup)
• 1 = Once per day (default)
• 2 = Every Neovim startup

11.2 Features ~

• "Did you know?" popup with centered layout
• Smart persistence using ~/.local/share/nvim/neovim_tips/persistent.json
• Full markdown rendering with render-markdown.nvim
• Easy copying of tip content and code snippets
• Close with `q` or `<Esc>`
• Includes contribution link in footer

11.3 Persistence ~

Once-daily mode tracks when tips were shown to avoid repetition within
the same day. Data is stored in:
~/.local/share/nvim/neovim_tips/persistent.json

==============================================================================
12. TROUBLESHOOTING                               *neovim-tips-troubleshooting*

12.1 Common Issues ~

No tips showing                Check that data/ directory exists in plugin
                               installation. Verify dependencies are installed.

Search not working             Make sure you're using correct syntax:
                               - Basic: just type words
                               - Tags: t:tagname
                               - Categories: c:categoryname

Daily tip not appearing        Check `daily_tip` configuration value.
                               Verify persistent.json isn't corrupted.

User tips not saving          Check `user_file` path is writable.
                               Verify parent directories exist.

Markdown not rendering         Ensure render-markdown.nvim is installed
                               and configured properly.

Slow loading times             If caching is disabled, enable it:
                               use_cache = true (default)
                               Run :NeovimTipsCacheInfo to check cache status
                               Run :NeovimTipsReload to rebuild cache

12.2 File Locations ~

Built-in tips:                <plugin_directory>/data/
User tips:                     ~/.config/nvim/neovim_tips/user_tips.md
Daily tip persistence:         ~/.local/share/nvim/neovim_tips/persistent.json
Cache files:                   ~/.cache/nvim/neovim_tips/
  - tips_cache.lua             Serialized tips data
  - cache_metadata.lua         Cache validation metadata

12.3 Disabling Completion ~

If using completion engines and want to disable them in the search bar:
>lua
    -- For blink.cmp
    require('blink.cmp').setup({
      enabled = function()
        return vim.bo.filetype ~= "neovim-tips-search"
      end,
    })

    -- For nvim-cmp
    require('cmp').setup({
      enabled = function()
        return vim.bo.filetype ~= "neovim-tips-search"
      end,
    })
<

==============================================================================
vim:tw=78:ts=8:ft=help:norl: